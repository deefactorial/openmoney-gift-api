/**
 * Openmoney API
 * Openmoney API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountsGet', 'model/CurrenciesGet', 'model/NamespacesGet', 'model/StewardsGet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountsGet'), require('./CurrenciesGet'), require('./NamespacesGet'), require('./StewardsGet'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenmoneyApi) {
      root.OpenmoneyApi = {};
    }
    root.OpenmoneyApi.RegisterResponse = factory(root.OpenmoneyApi.ApiClient, root.OpenmoneyApi.AccountsGet, root.OpenmoneyApi.CurrenciesGet, root.OpenmoneyApi.NamespacesGet, root.OpenmoneyApi.StewardsGet);
  }
}(this, function(ApiClient, AccountsGet, CurrenciesGet, NamespacesGet, StewardsGet) {
  'use strict';




  /**
   * The RegisterResponse model module.
   * @module model/RegisterResponse
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>RegisterResponse</code>.
   * @alias module:model/RegisterResponse
   * @class
   * @param stewards {Array.<module:model/StewardsGet>} 
   * @param accounts {Array.<module:model/AccountsGet>} 
   * @param currencies {Array.<module:model/CurrenciesGet>} 
   * @param namespaces {Array.<module:model/NamespacesGet>} 
   */
  var exports = function(stewards, accounts, currencies, namespaces) {
    var _this = this;

    _this['stewards'] = stewards;
    _this['accounts'] = accounts;
    _this['currencies'] = currencies;
    _this['namespaces'] = namespaces;
  };

  /**
   * Constructs a <code>RegisterResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RegisterResponse} obj Optional instance to populate.
   * @return {module:model/RegisterResponse} The populated <code>RegisterResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('stewards')) {
        obj['stewards'] = ApiClient.convertToType(data['stewards'], [StewardsGet]);
      }
      if (data.hasOwnProperty('accounts')) {
        obj['accounts'] = ApiClient.convertToType(data['accounts'], [AccountsGet]);
      }
      if (data.hasOwnProperty('currencies')) {
        obj['currencies'] = ApiClient.convertToType(data['currencies'], [CurrenciesGet]);
      }
      if (data.hasOwnProperty('namespaces')) {
        obj['namespaces'] = ApiClient.convertToType(data['namespaces'], [NamespacesGet]);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:model/StewardsGet>} stewards
   */
  exports.prototype['stewards'] = undefined;
  /**
   * @member {Array.<module:model/AccountsGet>} accounts
   */
  exports.prototype['accounts'] = undefined;
  /**
   * @member {Array.<module:model/CurrenciesGet>} currencies
   */
  exports.prototype['currencies'] = undefined;
  /**
   * @member {Array.<module:model/NamespacesGet>} namespaces
   */
  exports.prototype['namespaces'] = undefined;



  return exports;
}));


