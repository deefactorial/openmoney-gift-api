/**
 * Openmoney API
 * Openmoney API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteResponse', 'model/ErrorModel', 'model/ForgotResponse', 'model/ForgotRequest', 'model/StewardsGet', 'model/StewardsList', 'model/RegisterRequest', 'model/RegisterResponse', 'model/StewardsRequest', 'model/CreateResponse', 'model/ResetResponse', 'model/ResetRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteResponse'), require('../model/ErrorModel'), require('../model/ForgotResponse'), require('../model/ForgotRequest'), require('../model/StewardsGet'), require('../model/StewardsList'), require('../model/RegisterRequest'), require('../model/RegisterResponse'), require('../model/StewardsRequest'), require('../model/CreateResponse'), require('../model/ResetResponse'), require('../model/ResetRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenmoneyApi) {
      root.OpenmoneyApi = {};
    }
    root.OpenmoneyApi.StewardsApi = factory(root.OpenmoneyApi.ApiClient, root.OpenmoneyApi.DeleteResponse, root.OpenmoneyApi.ErrorModel, root.OpenmoneyApi.ForgotResponse, root.OpenmoneyApi.ForgotRequest, root.OpenmoneyApi.StewardsGet, root.OpenmoneyApi.StewardsList, root.OpenmoneyApi.RegisterRequest, root.OpenmoneyApi.RegisterResponse, root.OpenmoneyApi.StewardsRequest, root.OpenmoneyApi.CreateResponse, root.OpenmoneyApi.ResetResponse, root.OpenmoneyApi.ResetRequest);
  }
}(this, function(ApiClient, DeleteResponse, ErrorModel, ForgotResponse, ForgotRequest, StewardsGet, StewardsList, RegisterRequest, RegisterResponse, StewardsRequest, CreateResponse, ResetResponse, ResetRequest) {
  'use strict';

  /**
   * Stewards service.
   * @module api/StewardsApi
   * @version 2.0.0
   */

  /**
   * Constructs a new StewardsApi. 
   * @alias module:api/StewardsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the stewardsDelete operation.
     * @callback module:api/StewardsApi~stewardsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a steward account
     * @param {String} stewardname 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/StewardsApi~stewardsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResponse}
     */
    this.stewardsDelete = function(stewardname, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling stewardsDelete");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['basicAuthenticationSecurity', 'oauth2PasswordSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'apiKeySecurity', 'oauth2AccessCodeSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = DeleteResponse;

      return this.apiClient.callApi(
        '/stewards/{stewardname}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stewardsForgotPost operation.
     * @callback module:api/StewardsApi~stewardsForgotPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password or stewardname request
     * @param {module:model/ForgotRequest} forgotRequest Forgot Password Request
     * @param {module:api/StewardsApi~stewardsForgotPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotResponse}
     */
    this.stewardsForgotPost = function(forgotRequest, callback) {
      var postBody = forgotRequest;

      // verify the required parameter 'forgotRequest' is set
      if (forgotRequest == undefined || forgotRequest == null) {
        throw new Error("Missing the required parameter 'forgotRequest' when calling stewardsForgotPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = ForgotResponse;

      return this.apiClient.callApi(
        '/stewards/forgot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stewardsGet operation.
     * @callback module:api/StewardsApi~stewardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StewardsGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single steward
     * @param {String} stewardname 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/StewardsApi~stewardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StewardsGet}
     */
    this.stewardsGet = function(stewardname, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling stewardsGet");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['basicAuthenticationSecurity', 'oauth2PasswordSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'apiKeySecurity', 'oauth2AccessCodeSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = StewardsGet;

      return this.apiClient.callApi(
        '/stewards/{stewardname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stewardsList operation.
     * @callback module:api/StewardsApi~stewardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StewardsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a listing of known stewards
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/StewardsApi~stewardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StewardsList}
     */
    this.stewardsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['basicAuthenticationSecurity', 'oauth2PasswordSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'apiKeySecurity', 'oauth2AccessCodeSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = StewardsList;

      return this.apiClient.callApi(
        '/stewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stewardsPost operation.
     * @callback module:api/StewardsApi~stewardsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a steward on the system
     * @param {module:model/RegisterRequest} registerRequest Registration Request
     * @param {module:api/StewardsApi~stewardsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterResponse}
     */
    this.stewardsPost = function(registerRequest, callback) {
      var postBody = registerRequest;

      // verify the required parameter 'registerRequest' is set
      if (registerRequest == undefined || registerRequest == null) {
        throw new Error("Missing the required parameter 'registerRequest' when calling stewardsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = RegisterResponse;

      return this.apiClient.callApi(
        '/stewards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stewardsPut operation.
     * @callback module:api/StewardsApi~stewardsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a steward account
     * @param {String} stewardname 
     * @param {module:model/StewardsRequest} steward Steward Document
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/StewardsApi~stewardsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResponse}
     */
    this.stewardsPut = function(stewardname, steward, opts, callback) {
      opts = opts || {};
      var postBody = steward;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling stewardsPut");
      }

      // verify the required parameter 'steward' is set
      if (steward == undefined || steward == null) {
        throw new Error("Missing the required parameter 'steward' when calling stewardsPut");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['basicAuthenticationSecurity', 'oauth2PasswordSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'apiKeySecurity', 'oauth2AccessCodeSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = CreateResponse;

      return this.apiClient.callApi(
        '/stewards/{stewardname}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stewardsResetPost operation.
     * @callback module:api/StewardsApi~stewardsResetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password request
     * @param {String} stewardname 
     * @param {module:model/ResetRequest} resetRequest Reset Password Request
     * @param {module:api/StewardsApi~stewardsResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetResponse}
     */
    this.stewardsResetPost = function(stewardname, resetRequest, callback) {
      var postBody = resetRequest;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling stewardsResetPost");
      }

      // verify the required parameter 'resetRequest' is set
      if (resetRequest == undefined || resetRequest == null) {
        throw new Error("Missing the required parameter 'resetRequest' when calling stewardsResetPost");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = ResetResponse;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
