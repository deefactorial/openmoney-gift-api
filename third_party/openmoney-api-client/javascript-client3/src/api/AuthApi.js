/**
 * Openmoney API
 * Openmoney API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TokenResponse', 'model/ErrorModel', 'model/AccessTokenRequest', 'model/ApplicationResponse', 'model/ApplicationRequest', 'model/OauthAuthorizeRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TokenResponse'), require('../model/ErrorModel'), require('../model/AccessTokenRequest'), require('../model/ApplicationResponse'), require('../model/ApplicationRequest'), require('../model/OauthAuthorizeRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenmoneyApi) {
      root.OpenmoneyApi = {};
    }
    root.OpenmoneyApi.AuthApi = factory(root.OpenmoneyApi.ApiClient, root.OpenmoneyApi.TokenResponse, root.OpenmoneyApi.ErrorModel, root.OpenmoneyApi.AccessTokenRequest, root.OpenmoneyApi.ApplicationResponse, root.OpenmoneyApi.ApplicationRequest, root.OpenmoneyApi.OauthAuthorizeRequest);
  }
}(this, function(ApiClient, TokenResponse, ErrorModel, AccessTokenRequest, ApplicationResponse, ApplicationRequest, OauthAuthorizeRequest) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 2.0.0
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the accountGet operation.
     * @callback module:api/AuthApi~accountGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Steward account information
     * @param {String} stewardname 
     * @param {module:api/AuthApi~accountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.accountGet = function(stewardname, callback) {
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling accountGet");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/html'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/stewards/{stewardname}/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginGet operation.
     * @callback module:api/AuthApi~loginGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login Page for the steward
     * @param {String} stewardname 
     * @param {module:api/AuthApi~loginGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.loginGet = function(stewardname, callback) {
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling loginGet");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/stewards/{stewardname}/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginPost operation.
     * @callback module:api/AuthApi~loginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login steward
     * @param {String} stewardname 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/AuthApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.loginPost = function(stewardname, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling loginPost");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutPost operation.
     * @callback module:api/AuthApi~logoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout steward
     * @param {String} stewardname 
     * @param {module:api/AuthApi~logoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logoutPost = function(stewardname, callback) {
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling logoutPost");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = null;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthAccessTokenPost operation.
     * @callback module:api/AuthApi~oauthAccessTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges the user or client credentials for an access token used to access resources.
     * @param {String} stewardname 
     * @param {module:model/AccessTokenRequest} accessTokenRequest Access Token Request Object
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/AuthApi~oauthAccessTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    this.oauthAccessTokenPost = function(stewardname, accessTokenRequest, opts, callback) {
      opts = opts || {};
      var postBody = accessTokenRequest;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling oauthAccessTokenPost");
      }

      // verify the required parameter 'accessTokenRequest' is set
      if (accessTokenRequest == undefined || accessTokenRequest == null) {
        throw new Error("Missing the required parameter 'accessTokenRequest' when calling oauthAccessTokenPost");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['basicAuthenticationSecurity', 'oauth2Refresh'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/html'];
      var returnType = TokenResponse;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthApplicationPost operation.
     * @callback module:api/AuthApi~oauthApplicationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an application for a client_id and client_secret for oauth token authorization.
     * Existing steward Registers an application with the openmoney network.
     * @param {String} stewardname 
     * @param {module:model/ApplicationRequest} application Application Object
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/AuthApi~oauthApplicationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponse}
     */
    this.oauthApplicationPost = function(stewardname, application, opts, callback) {
      opts = opts || {};
      var postBody = application;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling oauthApplicationPost");
      }

      // verify the required parameter 'application' is set
      if (application == undefined || application == null) {
        throw new Error("Missing the required parameter 'application' when calling oauthApplicationPost");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['basicAuthenticationSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationResponse;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/oauth/application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthDialogeGet operation.
     * @callback module:api/AuthApi~oauthDialogeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implicit authorization dialog presented to steward to authorize client_id to access API resources on their behalf.
     * @param {String} stewardname 
     * @param {String} clientId Client ID received during registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirectUri A uri to redirect steward after authorization
     * @param {Array.<String>} opts.scopes A comma separated list of scopes. If not provided, scope defaults to an empty list of scopes for stewards that don’t have a valid token for the app. For stewards who do already have a valid token for the app, the steward won’t be shown the OAuth authorization page with the list of scopes. Instead, this step of the flow will automatically complete with the same scopes that were used last time the steward completed the flow.
     * @param {module:api/AuthApi~oauthDialogeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorModel}
     */
    this.oauthDialogeGet = function(stewardname, clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling oauthDialogeGet");
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw new Error("Missing the required parameter 'clientId' when calling oauthDialogeGet");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
        'client_id': clientId,
        'redirect_uri': opts['redirectUri'],
        'scopes': this.apiClient.buildCollectionParam(opts['scopes'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/html'];
      var returnType = ErrorModel;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/dialog/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthDialogePost operation.
     * @callback module:api/AuthApi~oauthDialogePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorizes a steward on the openmoney network
     * Authorization dialoge decision with allowed scopes.
     * @param {String} stewardname 
     * @param {module:model/OauthAuthorizeRequest} oauthAuthorizeRequest 
     * @param {module:api/AuthApi~oauthDialogePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorModel}
     */
    this.oauthDialogePost = function(stewardname, oauthAuthorizeRequest, callback) {
      var postBody = oauthAuthorizeRequest;

      // verify the required parameter 'stewardname' is set
      if (stewardname == undefined || stewardname == null) {
        throw new Error("Missing the required parameter 'stewardname' when calling oauthDialogePost");
      }

      // verify the required parameter 'oauthAuthorizeRequest' is set
      if (oauthAuthorizeRequest == undefined || oauthAuthorizeRequest == null) {
        throw new Error("Missing the required parameter 'oauthAuthorizeRequest' when calling oauthDialogePost");
      }


      var pathParams = {
        'stewardname': stewardname
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ErrorModel;

      return this.apiClient.callApi(
        '/stewards/{stewardname}/dialog/authorize/decision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
