/// <reference path="../../DefinitelyTyped/bluebird/bluebird.d.ts" />
/// <reference path="../../DefinitelyTyped/node/node.d.ts" />
/// <reference path="../../DefinitelyTyped/request/request.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var request = require('request');
var promise = require('bluebird');
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var AccessTokenRequest = (function () {
    function AccessTokenRequest() {
    }
    return AccessTokenRequest;
}());
exports.AccessTokenRequest = AccessTokenRequest;
var AccountsGet = (function (_super) {
    __extends(AccountsGet, _super);
    function AccountsGet() {
        _super.apply(this, arguments);
    }
    return AccountsGet;
}(GetResponse));
exports.AccountsGet = AccountsGet;
var AccountsList = (function (_super) {
    __extends(AccountsList, _super);
    function AccountsList() {
        _super.apply(this, arguments);
    }
    return AccountsList;
}(Array));
exports.AccountsList = AccountsList;
var AccountsRequest = (function () {
    function AccountsRequest() {
    }
    return AccountsRequest;
}());
exports.AccountsRequest = AccountsRequest;
var AccountsResponse = (function () {
    function AccountsResponse() {
    }
    return AccountsResponse;
}());
exports.AccountsResponse = AccountsResponse;
var AesEncryption = (function () {
    function AesEncryption() {
    }
    return AesEncryption;
}());
exports.AesEncryption = AesEncryption;
var ApplicationRequest = (function () {
    function ApplicationRequest() {
    }
    return ApplicationRequest;
}());
exports.ApplicationRequest = ApplicationRequest;
var ApplicationResponse = (function () {
    function ApplicationResponse() {
    }
    return ApplicationResponse;
}());
exports.ApplicationResponse = ApplicationResponse;
var CreateResponse = (function () {
    function CreateResponse() {
    }
    return CreateResponse;
}());
exports.CreateResponse = CreateResponse;
var CurrenciesGet = (function (_super) {
    __extends(CurrenciesGet, _super);
    function CurrenciesGet() {
        _super.apply(this, arguments);
    }
    return CurrenciesGet;
}(GetResponse));
exports.CurrenciesGet = CurrenciesGet;
var CurrenciesList = (function (_super) {
    __extends(CurrenciesList, _super);
    function CurrenciesList() {
        _super.apply(this, arguments);
    }
    return CurrenciesList;
}(Array));
exports.CurrenciesList = CurrenciesList;
var CurrenciesRequest = (function () {
    function CurrenciesRequest() {
    }
    return CurrenciesRequest;
}());
exports.CurrenciesRequest = CurrenciesRequest;
var CurrenciesResponse = (function () {
    function CurrenciesResponse() {
    }
    return CurrenciesResponse;
}());
exports.CurrenciesResponse = CurrenciesResponse;
var DeleteResponse = (function () {
    function DeleteResponse() {
    }
    return DeleteResponse;
}());
exports.DeleteResponse = DeleteResponse;
var EncryptedJournals = (function () {
    function EncryptedJournals() {
    }
    return EncryptedJournals;
}());
exports.EncryptedJournals = EncryptedJournals;
var ErrorModel = (function () {
    function ErrorModel() {
    }
    return ErrorModel;
}());
exports.ErrorModel = ErrorModel;
var GetResponse = (function () {
    function GetResponse() {
    }
    return GetResponse;
}());
exports.GetResponse = GetResponse;
var JournalsList = (function (_super) {
    __extends(JournalsList, _super);
    function JournalsList() {
        _super.apply(this, arguments);
    }
    return JournalsList;
}(Array));
exports.JournalsList = JournalsList;
var JournalsRequest = (function () {
    function JournalsRequest() {
    }
    return JournalsRequest;
}());
exports.JournalsRequest = JournalsRequest;
var JournalsResponse = (function () {
    function JournalsResponse() {
    }
    return JournalsResponse;
}());
exports.JournalsResponse = JournalsResponse;
var Modification = (function () {
    function Modification() {
    }
    return Modification;
}());
exports.Modification = Modification;
var NamespacesGet = (function (_super) {
    __extends(NamespacesGet, _super);
    function NamespacesGet() {
        _super.apply(this, arguments);
    }
    return NamespacesGet;
}(GetResponse));
exports.NamespacesGet = NamespacesGet;
var NamespacesList = (function (_super) {
    __extends(NamespacesList, _super);
    function NamespacesList() {
        _super.apply(this, arguments);
    }
    return NamespacesList;
}(Array));
exports.NamespacesList = NamespacesList;
var NamespacesRequest = (function () {
    function NamespacesRequest() {
    }
    return NamespacesRequest;
}());
exports.NamespacesRequest = NamespacesRequest;
var NamespacesResponse = (function () {
    function NamespacesResponse() {
    }
    return NamespacesResponse;
}());
exports.NamespacesResponse = NamespacesResponse;
var OauthAuthorizeRequest = (function () {
    function OauthAuthorizeRequest() {
    }
    return OauthAuthorizeRequest;
}());
exports.OauthAuthorizeRequest = OauthAuthorizeRequest;
var RegisterRequest = (function () {
    function RegisterRequest() {
    }
    return RegisterRequest;
}());
exports.RegisterRequest = RegisterRequest;
var RegisterResponse = (function () {
    function RegisterResponse() {
    }
    return RegisterResponse;
}());
exports.RegisterResponse = RegisterResponse;
var StewardsGet = (function (_super) {
    __extends(StewardsGet, _super);
    function StewardsGet() {
        _super.apply(this, arguments);
    }
    return StewardsGet;
}(GetResponse));
exports.StewardsGet = StewardsGet;
var StewardsList = (function (_super) {
    __extends(StewardsList, _super);
    function StewardsList() {
        _super.apply(this, arguments);
    }
    return StewardsList;
}(Array));
exports.StewardsList = StewardsList;
var StewardsRequest = (function () {
    function StewardsRequest() {
    }
    return StewardsRequest;
}());
exports.StewardsRequest = StewardsRequest;
var StewardsResponse = (function () {
    function StewardsResponse() {
    }
    return StewardsResponse;
}());
exports.StewardsResponse = StewardsResponse;
var TokenResponse = (function () {
    function TokenResponse() {
    }
    return TokenResponse;
}());
exports.TokenResponse = TokenResponse;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    };
    return OAuth;
}());
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
        // Do nothing
    };
    return VoidAuth;
}());
var AccountsApi = (function () {
    function AccountsApi(basePathOrUsername, password, basePath) {
        this.basePath = 'https://cloud.openmoney.cc/V2';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2PasswordSecurity': new OAuth(),
            'oauth2ImplicitSecurity': new OAuth(),
            'oauth2ApplicationSecurity': new OAuth(),
            'oauth2AccessCodeSecurity': new OAuth(),
            'apiKeySecurity': new ApiKeyAuth('header', 'Authorization'),
            'oauth2Refresh': new ApiKeyAuth('header', 'Authorization'),
            'basicAuthenticationSecurity': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AccountsApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.oauth2PasswordSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountsApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.apiKeySecurity.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountsApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuthenticationSecurity.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountsApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuthenticationSecurity.password = password;
        },
        enumerable: true,
        configurable: true
    });
    AccountsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Delete an account
     *
     * @param stewardname
     * @param namespace
     * @param account
     * @param authorization Authorization Token
     */
    AccountsApi.prototype.accountsDelete = function (stewardname, namespace, account, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'account' + '}', String(account));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountsDelete');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling accountsDelete');
        }
        // verify required parameter 'account' is set
        if (!account) {
            throw new Error('Missing required parameter account when calling accountsDelete');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Lookup an account by it&#39;s public key
     *
     * @param stewardname
     * @param authorization Authorization Token
     * @param publicKey Accounts public Key
     */
    AccountsApi.prototype.accountsDiscovery = function (stewardname, authorization, publicKey) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/accounts/lookup'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountsDiscovery');
        }
        if (publicKey !== undefined) {
            queryParameters['publicKey'] = publicKey;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get an account by account name
     *
     * @param stewardname
     * @param namespace
     * @param account
     * @param currency
     * @param currencyNamespace
     * @param authorization Authorization Token
     */
    AccountsApi.prototype.accountsGet = function (stewardname, namespace, account, currency, currencyNamespace, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'account' + '}', String(account));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountsGet');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling accountsGet');
        }
        // verify required parameter 'account' is set
        if (!account) {
            throw new Error('Missing required parameter account when calling accountsGet');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling accountsGet');
        }
        // verify required parameter 'currencyNamespace' is set
        if (!currencyNamespace) {
            throw new Error('Missing required parameter currencyNamespace when calling accountsGet');
        }
        if (currency !== undefined) {
            queryParameters['currency'] = currency;
        }
        if (currencyNamespace !== undefined) {
            queryParameters['currency_namespace'] = currencyNamespace;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a Listing of accounts in a namespace
     *
     * @param stewardname
     * @param namespace
     * @param currency
     * @param currencyNamespace
     * @param authorization Authorization Token
     */
    AccountsApi.prototype.accountsList = function (stewardname, namespace, currency, currencyNamespace, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountsList');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling accountsList');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling accountsList');
        }
        // verify required parameter 'currencyNamespace' is set
        if (!currencyNamespace) {
            throw new Error('Missing required parameter currencyNamespace when calling accountsList');
        }
        if (currency !== undefined) {
            queryParameters['currency'] = currency;
        }
        if (currencyNamespace !== undefined) {
            queryParameters['currency_namespace'] = currencyNamespace;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * create an account in a namespace
     *
     * @param stewardname
     * @param namespace
     * @param authorization Authorization Token
     * @param account
     */
    AccountsApi.prototype.accountsPost = function (stewardname, namespace, authorization, account) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountsPost');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling accountsPost');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: account,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Update an account
     *
     * @param stewardname
     * @param namespace
     * @param account Account Name
     * @param authorization Authorization Token
     * @param accounts
     */
    AccountsApi.prototype.accountsPut = function (stewardname, namespace, account, authorization, accounts) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'account' + '}', String(account));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountsPut');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling accountsPut');
        }
        // verify required parameter 'account' is set
        if (!account) {
            throw new Error('Missing required parameter account when calling accountsPut');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: accounts,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    return AccountsApi;
}());
exports.AccountsApi = AccountsApi;
var AuthApi = (function () {
    function AuthApi(basePathOrUsername, password, basePath) {
        this.basePath = 'https://cloud.openmoney.cc/V2';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2PasswordSecurity': new OAuth(),
            'oauth2ImplicitSecurity': new OAuth(),
            'oauth2ApplicationSecurity': new OAuth(),
            'oauth2AccessCodeSecurity': new OAuth(),
            'apiKeySecurity': new ApiKeyAuth('header', 'Authorization'),
            'oauth2Refresh': new ApiKeyAuth('header', 'Authorization'),
            'basicAuthenticationSecurity': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AuthApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.oauth2PasswordSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.apiKeySecurity.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuthenticationSecurity.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuthenticationSecurity.password = password;
        },
        enumerable: true,
        configurable: true
    });
    AuthApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Get Steward account information
     *
     * @param stewardname
     */
    AuthApi.prototype.accountGet = function (stewardname) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/account'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling accountGet');
        }
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Login Page for the steward
     *
     * @param stewardname
     */
    AuthApi.prototype.loginGet = function (stewardname) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/login'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling loginGet');
        }
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Login steward
     *
     * @param stewardname
     * @param authorization
     */
    AuthApi.prototype.loginPost = function (stewardname, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/login'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling loginPost');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Logout steward
     *
     * @param stewardname
     */
    AuthApi.prototype.logoutPost = function (stewardname) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/logout'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling logoutPost');
        }
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Exchanges the user or client credentials for an access token used to access resources.
     *
     * @param stewardname
     * @param accessTokenRequest Access Token Request Object
     * @param authorization
     */
    AuthApi.prototype.oauthAccessTokenPost = function (stewardname, accessTokenRequest, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/oauth/token'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling oauthAccessTokenPost');
        }
        // verify required parameter 'accessTokenRequest' is set
        if (!accessTokenRequest) {
            throw new Error('Missing required parameter accessTokenRequest when calling oauthAccessTokenPost');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: accessTokenRequest,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2Refresh.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Create an application for a client_id and client_secret for oauth token authorization.
     * Existing steward Registers an application with the openmoney network.
     * @param stewardname
     * @param application Application Object
     * @param authorization
     */
    AuthApi.prototype.oauthApplicationPost = function (stewardname, application, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/oauth/application'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling oauthApplicationPost');
        }
        // verify required parameter 'application' is set
        if (!application) {
            throw new Error('Missing required parameter application when calling oauthApplicationPost');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: application,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Implicit authorization dialog presented to steward to authorize client_id to access API resources on their behalf.
     *
     * @param stewardname
     * @param clientId Client ID received during registration
     * @param redirectUri A uri to redirect steward after authorization
     * @param scopes A comma separated list of scopes. If not provided, scope defaults to an empty list of scopes for stewards that don\u2019t have a valid token for the app. For stewards who do already have a valid token for the app, the steward won\u2019t be shown the OAuth authorization page with the list of scopes. Instead, this step of the flow will automatically complete with the same scopes that were used last time the steward completed the flow.
     */
    AuthApi.prototype.oauthDialogeGet = function (stewardname, clientId, redirectUri, scopes) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/dialog/authorize'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling oauthDialogeGet');
        }
        // verify required parameter 'clientId' is set
        if (!clientId) {
            throw new Error('Missing required parameter clientId when calling oauthDialogeGet');
        }
        if (clientId !== undefined) {
            queryParameters['client_id'] = clientId;
        }
        if (redirectUri !== undefined) {
            queryParameters['redirect_uri'] = redirectUri;
        }
        if (scopes !== undefined) {
            queryParameters['scopes'] = scopes;
        }
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Authorizes a steward on the openmoney network
     * Authorization dialoge decision with allowed scopes.
     * @param stewardname
     * @param oauthAuthorizeRequest
     */
    AuthApi.prototype.oauthDialogePost = function (stewardname, oauthAuthorizeRequest) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/dialog/authorize/decision'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling oauthDialogePost');
        }
        // verify required parameter 'oauthAuthorizeRequest' is set
        if (!oauthAuthorizeRequest) {
            throw new Error('Missing required parameter oauthAuthorizeRequest when calling oauthDialogePost');
        }
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: oauthAuthorizeRequest,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    return AuthApi;
}());
exports.AuthApi = AuthApi;
var CurrenciesApi = (function () {
    function CurrenciesApi(basePathOrUsername, password, basePath) {
        this.basePath = 'https://cloud.openmoney.cc/V2';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2PasswordSecurity': new OAuth(),
            'oauth2ImplicitSecurity': new OAuth(),
            'oauth2ApplicationSecurity': new OAuth(),
            'oauth2AccessCodeSecurity': new OAuth(),
            'apiKeySecurity': new ApiKeyAuth('header', 'Authorization'),
            'oauth2Refresh': new ApiKeyAuth('header', 'Authorization'),
            'basicAuthenticationSecurity': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CurrenciesApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.oauth2PasswordSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CurrenciesApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.apiKeySecurity.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CurrenciesApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuthenticationSecurity.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CurrenciesApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuthenticationSecurity.password = password;
        },
        enumerable: true,
        configurable: true
    });
    CurrenciesApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Delete a currency
     *
     * @param stewardname
     * @param namespace
     * @param currency Currency name
     * @param authorization Authorization Token
     */
    CurrenciesApi.prototype.currenciesDelete = function (stewardname, namespace, currency, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/currencies/{currency}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'currency' + '}', String(currency));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling currenciesDelete');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling currenciesDelete');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling currenciesDelete');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a currency by its name
     *
     * @param stewardname
     * @param namespace
     * @param currency Name of a currency
     * @param authorization Authorization Token
     */
    CurrenciesApi.prototype.currenciesGet = function (stewardname, namespace, currency, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/currencies/{currency}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'currency' + '}', String(currency));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling currenciesGet');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling currenciesGet');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling currenciesGet');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a Listing currencies known by steward.
     *
     * @param stewardname
     * @param namespace
     * @param authorization Authorization Token
     */
    CurrenciesApi.prototype.currenciesList = function (stewardname, namespace, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/currencies'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling currenciesList');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling currenciesList');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Create a currency
     *
     * @param stewardname
     * @param namespace
     * @param authorization Authorization Token
     * @param currency
     */
    CurrenciesApi.prototype.currenciesPost = function (stewardname, namespace, authorization, currency) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/currencies'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling currenciesPost');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling currenciesPost');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: currency,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Update a Currency
     *
     * @param stewardname
     * @param namespace
     * @param currency Name of a currency
     * @param authorization Authorization Token
     * @param currencies
     */
    CurrenciesApi.prototype.currenciesPut = function (stewardname, namespace, currency, authorization, currencies) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/currencies/{currency}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'currency' + '}', String(currency));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling currenciesPut');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling currenciesPut');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling currenciesPut');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: currencies,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    return CurrenciesApi;
}());
exports.CurrenciesApi = CurrenciesApi;
var JournalsApi = (function () {
    function JournalsApi(basePathOrUsername, password, basePath) {
        this.basePath = 'https://cloud.openmoney.cc/V2';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2PasswordSecurity': new OAuth(),
            'oauth2ImplicitSecurity': new OAuth(),
            'oauth2ApplicationSecurity': new OAuth(),
            'oauth2AccessCodeSecurity': new OAuth(),
            'apiKeySecurity': new ApiKeyAuth('header', 'Authorization'),
            'oauth2Refresh': new ApiKeyAuth('header', 'Authorization'),
            'basicAuthenticationSecurity': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(JournalsApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.oauth2PasswordSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JournalsApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.apiKeySecurity.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JournalsApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuthenticationSecurity.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JournalsApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuthenticationSecurity.password = password;
        },
        enumerable: true,
        configurable: true
    });
    JournalsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * List Journal Entries for this accountname
     *
     * @param stewardname
     * @param namespace
     * @param account
     * @param currency
     * @param authorization Authorization Token
     * @param currencyNamespace
     * @param offset
     * @param range
     */
    JournalsApi.prototype.journalsList = function (stewardname, namespace, account, currency, authorization, currencyNamespace, offset, range) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}/journals/{currency}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'account' + '}', String(account))
            .replace('{' + 'currency' + '}', String(currency));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling journalsList');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling journalsList');
        }
        // verify required parameter 'account' is set
        if (!account) {
            throw new Error('Missing required parameter account when calling journalsList');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling journalsList');
        }
        if (currencyNamespace !== undefined) {
            queryParameters['currency_namespace'] = currencyNamespace;
        }
        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }
        if (range !== undefined) {
            queryParameters['range'] = range;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Create a journal entry for this account
     *
     * @param stewardname
     * @param namespace
     * @param account
     * @param currency
     * @param authorization Authorization Token
     * @param currencyNamespace
     * @param journal
     */
    JournalsApi.prototype.journalsPost = function (stewardname, namespace, account, currency, authorization, currencyNamespace, journal) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}/journals/{currency}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'account' + '}', String(account))
            .replace('{' + 'currency' + '}', String(currency));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling journalsPost');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling journalsPost');
        }
        // verify required parameter 'account' is set
        if (!account) {
            throw new Error('Missing required parameter account when calling journalsPost');
        }
        // verify required parameter 'currency' is set
        if (!currency) {
            throw new Error('Missing required parameter currency when calling journalsPost');
        }
        if (currencyNamespace !== undefined) {
            queryParameters['currency_namespace'] = currencyNamespace;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: journal,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    return JournalsApi;
}());
exports.JournalsApi = JournalsApi;
var NamespacesApi = (function () {
    function NamespacesApi(basePathOrUsername, password, basePath) {
        this.basePath = 'https://cloud.openmoney.cc/V2';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2PasswordSecurity': new OAuth(),
            'oauth2ImplicitSecurity': new OAuth(),
            'oauth2ApplicationSecurity': new OAuth(),
            'oauth2AccessCodeSecurity': new OAuth(),
            'apiKeySecurity': new ApiKeyAuth('header', 'Authorization'),
            'oauth2Refresh': new ApiKeyAuth('header', 'Authorization'),
            'basicAuthenticationSecurity': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(NamespacesApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.oauth2PasswordSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NamespacesApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.apiKeySecurity.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NamespacesApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuthenticationSecurity.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NamespacesApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuthenticationSecurity.password = password;
        },
        enumerable: true,
        configurable: true
    });
    NamespacesApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Delete a namespace
     * @param stewardname
     * @param namespace namespace name
     * @param authorization Authorization Token
     */
    NamespacesApi.prototype.spacesDelete = function (stewardname, namespace, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling spacesDelete');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling spacesDelete');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a namespace by it&#39;s name
     *
     * @param stewardname
     * @param namespace space name
     * @param authorization Authorization Token
     */
    NamespacesApi.prototype.spacesGet = function (stewardname, namespace, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling spacesGet');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling spacesGet');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a Listing of namespaces known by steward.
     *
     * @param stewardname
     * @param authorization Authorization Token
     * @param parentNamespace
     */
    NamespacesApi.prototype.spacesList = function (stewardname, authorization, parentNamespace) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling spacesList');
        }
        if (parentNamespace !== undefined) {
            queryParameters['parent_namespace'] = parentNamespace;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Create a namespace
     *
     * @param stewardname
     * @param space
     * @param authorization Authorization Token
     */
    NamespacesApi.prototype.spacesPost = function (stewardname, space, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling spacesPost');
        }
        // verify required parameter 'space' is set
        if (!space) {
            throw new Error('Missing required parameter space when calling spacesPost');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: space,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Update a namespace
     *
     * @param stewardname
     * @param namespace space name
     * @param authorization Authorization Token
     * @param space
     */
    NamespacesApi.prototype.spacesPut = function (stewardname, namespace, authorization, space) {
        var localVarPath = this.basePath + '/stewards/{stewardname}/namespaces/{namespace}'
            .replace('{' + 'stewardname' + '}', String(stewardname))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling spacesPut');
        }
        // verify required parameter 'namespace' is set
        if (!namespace) {
            throw new Error('Missing required parameter namespace when calling spacesPut');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: space,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    return NamespacesApi;
}());
exports.NamespacesApi = NamespacesApi;
var StewardsApi = (function () {
    function StewardsApi(basePathOrUsername, password, basePath) {
        this.basePath = 'https://cloud.openmoney.cc/V2';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2PasswordSecurity': new OAuth(),
            'oauth2ImplicitSecurity': new OAuth(),
            'oauth2ApplicationSecurity': new OAuth(),
            'oauth2AccessCodeSecurity': new OAuth(),
            'apiKeySecurity': new ApiKeyAuth('header', 'Authorization'),
            'oauth2Refresh': new ApiKeyAuth('header', 'Authorization'),
            'basicAuthenticationSecurity': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(StewardsApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.oauth2PasswordSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StewardsApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.apiKeySecurity.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StewardsApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuthenticationSecurity.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StewardsApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuthenticationSecurity.password = password;
        },
        enumerable: true,
        configurable: true
    });
    StewardsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Delete a steward account
     *
     * @param stewardname
     * @param authorization
     */
    StewardsApi.prototype.stewardsDelete = function (stewardname, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling stewardsDelete');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a single steward
     *
     * @param stewardname
     * @param authorization
     */
    StewardsApi.prototype.stewardsGet = function (stewardname, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling stewardsGet');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Get a listing of known stewards
     *
     * @param authorization
     */
    StewardsApi.prototype.stewardsList = function (authorization) {
        var localVarPath = this.basePath + '/stewards';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Register a steward on the system
     *
     * @param registerRequest Registration Request
     */
    StewardsApi.prototype.stewardsPost = function (registerRequest) {
        var localVarPath = this.basePath + '/stewards';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'registerRequest' is set
        if (!registerRequest) {
            throw new Error('Missing required parameter registerRequest when calling stewardsPost');
        }
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: registerRequest,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    /**
     * Update a steward account
     *
     * @param stewardname
     * @param steward Steward Document
     * @param authorization
     */
    StewardsApi.prototype.stewardsPut = function (stewardname, steward, authorization) {
        var localVarPath = this.basePath + '/stewards/{stewardname}'
            .replace('{' + 'stewardname' + '}', String(stewardname));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stewardname' is set
        if (!stewardname) {
            throw new Error('Missing required parameter stewardname when calling stewardsPut');
        }
        // verify required parameter 'steward' is set
        if (!steward) {
            throw new Error('Missing required parameter steward when calling stewardsPut');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var localVarDeferred = promise.defer();
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: steward,
        };
        this.authentications.basicAuthenticationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2PasswordSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ApplicationSecurity.applyToRequest(requestOptions);
        this.authentications.oauth2ImplicitSecurity.applyToRequest(requestOptions);
        this.authentications.apiKeySecurity.applyToRequest(requestOptions);
        this.authentications.oauth2AccessCodeSecurity.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                localVarDeferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    localVarDeferred.resolve({ response: response, body: body });
                }
                else {
                    localVarDeferred.reject({ response: response, body: body });
                }
            }
        });
        return localVarDeferred.promise;
    };
    return StewardsApi;
}());
exports.StewardsApi = StewardsApi;
